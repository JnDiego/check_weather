{"version":3,"sources":["components/Header.jsx","components/Error.jsx","components/Form.jsx","components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","href","Error","message","Form","search","setSearch","setConsult","useState","error","setError","city","country","handleChange","event","target","name","value","action","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Weather","result","main","parseFloat","temp","toFixed","temp_max","temp_min","App","component","consult","setResult","useEffect","a","url","fetch","response","json","cod","fetchApi","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c26d66ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper light-blue darken-2\">\r\n        <a href=\"#!\" className=\"brand-logo\">\r\n          {title}\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({ message }) => {\r\n  return <p className=\"red darken-4 error\">{message}</p>;\r\n};\r\n\r\nError.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Error;\r\n","import React, { useState } from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({ search, setSearch, setConsult }) => {\r\n  const [error, setError] = useState(false);\r\n\r\n  // Extraer ciudad y pais\r\n  const { city, country } = search;\r\n\r\n  // Función que agrega los elementos en el state\r\n  const handleChange = (event) => {\r\n    // Actualizar state\r\n    setSearch({\r\n      ...search,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Cuando el usuario da submit al form\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // Validar\r\n    if (city.trim() === '' || country.trim() === '') {\r\n      setError(true);\r\n      return;\r\n    }\r\n\r\n    setError(false);\r\n\r\n    //Enviar a componente principal\r\n    setConsult(true);\r\n  };\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={handleSubmit}>\r\n      {error ? <Error message=\"All fields are required\" /> : null}\r\n      <div className=\"input-field col s12\">\r\n        <input type=\"text\" name=\"city\" id=\"city\" value={city} onChange={handleChange} />\r\n        <label htmlFor=\"city\">City: </label>\r\n      </div>\r\n\r\n      <div className=\"input-field col s12\">\r\n        <select name=\"country\" id=\"country\" value={country} onChange={handleChange}>\r\n          <option value=\"\">-- Select a country --</option>\r\n          <option value=\"US\">Estados Unidos</option>\r\n          <option value=\"MX\">México</option>\r\n          <option value=\"AR\">Argentina</option>\r\n          <option value=\"CO\">Colombia</option>\r\n          <option value=\"CR\">Costa Rica</option>\r\n          <option value=\"ES\">España</option>\r\n          <option value=\"PE\">Perú</option>\r\n        </select>\r\n        <label htmlFor=\"country\">Country: </label>\r\n      </div>\r\n\r\n      <div className=\"input-field col s12\">\r\n        <button type=\"submit\" className=\"waves-effect waves-light btn-large btn-block yellow accent-4 col s12\">\r\n          Check weather\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  search: PropTypes.object.isRequired,\r\n  setSearch: PropTypes.func.isRequired,\r\n  setConsult: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Weather = ({ result }) => {\r\n  //Extraer los valores\r\n  const { name, main } = result;\r\n\r\n  if (!name) return null;\r\n\r\n  // Grados kelvin\r\n  const kelvin = 273.15;\r\n\r\n  return (\r\n    <div className=\"card-panel white col s12\">\r\n      <div className=\"black-text\">\r\n        <h2>{name}'s weather is: </h2>\r\n        <p className=\"temperatura\">\r\n          {parseFloat(main.temp - kelvin, 10).toFixed(2)} <span> &#x2103;</span>\r\n        </p>\r\n        <p>\r\n          Maximum temperature:\r\n          {parseFloat(main.temp_max - kelvin, 10).toFixed(2)} <span> &#x2103;</span>\r\n        </p>\r\n        <p>\r\n          Minimum temperature:\r\n          {parseFloat(main.temp_min - kelvin, 10).toFixed(2)} <span> &#x2103;</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeather.propTypes = {\r\n  result: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport Header from './components/Header';\r\nimport Form from './components/Form';\r\nimport Weather from './components/Weather';\r\nimport Error from './components/Error';\r\n\r\nfunction App() {\r\n  //State del formulario\r\n  const [search, setSearch] = useState({\r\n    city: '',\r\n    country: '',\r\n  });\r\n  // Extraer ciudad y pais\r\n  const { city, country } = search;\r\n\r\n  const [consult, setConsult] = useState(false);\r\n  const [result, setResult] = useState({});\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      if (consult) {\r\n        const appId = '';\r\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${appId}`;\r\n        const response = await fetch(url);\r\n        const result = await response.json();\r\n\r\n        setResult(result);\r\n        setConsult(false);\r\n\r\n        // Detecta si hubo resultados correctos en la consulta\r\n        if (result.cod === '404') {\r\n          setError(true);\r\n        } else {\r\n          setError(false);\r\n        }\r\n      }\r\n    };\r\n    fetchApi();\r\n  }, [city, consult, country]);\r\n\r\n  let component;\r\n  if (error) {\r\n    component = <Error message=\"No results\" />;\r\n  } else {\r\n    component = <Weather result={result} />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Header title=\"Weather Application\" />\r\n      <div className=\"contenedor-form\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col m6 s12\">\r\n              <Form search={search} setSearch={setSearch} setConsult={setConsult} />\r\n            </div>\r\n            <div className=\"col m6 s12\">{component}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}